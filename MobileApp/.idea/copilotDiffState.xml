<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/elearning/ui/screens/ChatScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/elearning/ui/screens/ChatScreen.kt" />
              <option name="originalContent" value="package com.elearning.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.elearning.ui.data.model.ChatMessage&#10;import com.elearning.ui.viewmodel.ChatViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ChatScreen(&#10;    courseId: String,&#10;    viewModel: ChatViewModel,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val messages by viewModel.messages.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    var messageText by remember { mutableStateOf(&quot;&quot;) }&#10;    val listState = rememberLazyListState()&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    LaunchedEffect(courseId) {&#10;        viewModel.initializeChat(courseId)&#10;    }&#10;&#10;    LaunchedEffect(messages.size) {&#10;        if (messages.isNotEmpty()) {&#10;            coroutineScope.launch {&#10;                listState.animateScrollToItem(messages.size - 1)&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Column {&#10;                        Text(&#10;                            &quot;AI Tutor&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            &quot;Ask questions about course materials&quot;,&#10;                            style = MaterialTheme.typography.bodySmall&#10;                        )&#10;                    }&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { viewModel.clearChat() }) {&#10;                        Icon(Icons.Default.Refresh, contentDescription = &quot;Clear chat&quot;)&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary,&#10;                    titleContentColor = MaterialTheme.colorScheme.onSecondary,&#10;                    navigationIconContentColor = MaterialTheme.colorScheme.onSecondary,&#10;                    actionIconContentColor = MaterialTheme.colorScheme.onSecondary&#10;                )&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(padding)&#10;        ) {&#10;            // Messages list&#10;            LazyColumn(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .fillMaxWidth(),&#10;                state = listState,&#10;                contentPadding = PaddingValues(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(messages) { message -&gt;&#10;                    ChatMessageBubble(message)&#10;                }&#10;            }&#10;&#10;            // Input area&#10;            Surface(&#10;                shadowElevation = 8.dp,&#10;                tonalElevation = 3.dp&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    TextField(&#10;                        value = messageText,&#10;                        onValueChange = { messageText = it },&#10;                        modifier = Modifier.weight(1f),&#10;                        placeholder = { Text(&quot;Ask a question...&quot;) },&#10;                        shape = RoundedCornerShape(24.dp),&#10;                        colors = TextFieldDefaults.colors(&#10;                            focusedIndicatorColor = MaterialTheme.colorScheme.outline,&#10;                            unfocusedIndicatorColor = MaterialTheme.colorScheme.outline&#10;                        ),&#10;                        maxLines = 4&#10;                    )&#10;&#10;                    FilledIconButton(&#10;                        onClick = {&#10;                            if (messageText.isNotBlank()) {&#10;                                viewModel.sendMessage(messageText)&#10;                                messageText = &quot;&quot;&#10;                            }&#10;                        },&#10;                        enabled = messageText.isNotBlank() &amp;&amp; !isLoading,&#10;                        modifier = Modifier.size(56.dp),&#10;                        colors = IconButtonDefaults.filledIconButtonColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            Icons.AutoMirrored.Filled.Send,&#10;                            contentDescription = &quot;Send&quot;,&#10;                            modifier = Modifier.size(24.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ChatMessageBubble(message: ChatMessage) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = if (message.isUser) Arrangement.End else Arrangement.Start&#10;    ) {&#10;        if (!message.isUser) {&#10;            Surface(&#10;                shape = MaterialTheme.shapes.medium,&#10;                color = MaterialTheme.colorScheme.secondaryContainer,&#10;                modifier = Modifier.size(40.dp)&#10;            ) {&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier.fillMaxSize()&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.AccountCircle,&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;        }&#10;&#10;        Column(&#10;            modifier = Modifier.widthIn(max = 300.dp),&#10;            horizontalAlignment = if (message.isUser) Alignment.End else Alignment.Start&#10;        ) {&#10;            Surface(&#10;                shape = RoundedCornerShape(&#10;                    topStart = 16.dp,&#10;                    topEnd = 16.dp,&#10;                    bottomStart = if (message.isUser) 16.dp else 4.dp,&#10;                    bottomEnd = if (message.isUser) 4.dp else 16.dp&#10;                ),&#10;                color = if (message.isUser)&#10;                    MaterialTheme.colorScheme.primary&#10;                else&#10;                    MaterialTheme.colorScheme.surfaceVariant,&#10;                shadowElevation = 1.dp&#10;            ) {&#10;                Box(modifier = Modifier.padding(12.dp)) {&#10;                    if (message.isLoading) {&#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(4.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            repeat(3) {&#10;                                Surface(&#10;                                    shape = MaterialTheme.shapes.small,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.3f),&#10;                                    modifier = Modifier.size(8.dp)&#10;                                ) {}&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Text(&#10;                            text = message.content,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = if (message.isUser)&#10;                                MaterialTheme.colorScheme.onPrimary&#10;                            else&#10;                                MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (message.isUser) {&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Surface(&#10;                shape = MaterialTheme.shapes.medium,&#10;                color = MaterialTheme.colorScheme.primaryContainer,&#10;                modifier = Modifier.size(40.dp)&#10;            ) {&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier.fillMaxSize()&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Person,&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.elearning.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.elearning.ui.data.model.ChatMessage&#10;import com.elearning.ui.viewmodel.ChatViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ChatScreen(&#10;    courseId: String,&#10;    viewModel: ChatViewModel,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val messages by viewModel.messages.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    var messageText by remember { mutableStateOf(&quot;&quot;) }&#10;    val listState = rememberLazyListState()&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    LaunchedEffect(courseId) {&#10;        viewModel.initializeChat(courseId)&#10;    }&#10;&#10;    LaunchedEffect(messages.size) {&#10;        if (messages.isNotEmpty()) {&#10;            coroutineScope.launch {&#10;                listState.animateScrollToItem(messages.size - 1)&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Column {&#10;                        Text(&#10;                            &quot;AI Tutor&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            &quot;Ask questions about course materials&quot;,&#10;                            style = MaterialTheme.typography.bodySmall&#10;                        )&#10;                    }&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBackClick) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { viewModel.clearChat() }) {&#10;                        Icon(Icons.Default.Refresh, contentDescription = &quot;Clear chat&quot;)&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary,&#10;                    titleContentColor = MaterialTheme.colorScheme.onSecondary,&#10;                    navigationIconContentColor = MaterialTheme.colorScheme.onSecondary,&#10;                    actionIconContentColor = MaterialTheme.colorScheme.onSecondary&#10;                )&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(padding)&#10;        ) {&#10;            // Messages list&#10;            LazyColumn(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .fillMaxWidth(),&#10;                state = listState,&#10;                contentPadding = PaddingValues(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(messages) { message -&gt;&#10;                    ChatMessageBubble(message)&#10;                }&#10;            }&#10;&#10;            // Input area&#10;            Surface(&#10;                shadowElevation = 8.dp,&#10;                tonalElevation = 3.dp&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    TextField(&#10;                        value = messageText,&#10;                        onValueChange = { messageText = it },&#10;                        modifier = Modifier.weight(1f),&#10;                        placeholder = { Text(&quot;Ask a question...&quot;) },&#10;                        shape = RoundedCornerShape(24.dp),&#10;                        colors = TextFieldDefaults.colors(&#10;                            focusedIndicatorColor = MaterialTheme.colorScheme.outline,&#10;                            unfocusedIndicatorColor = MaterialTheme.colorScheme.outline&#10;                        ),&#10;                        maxLines = 4&#10;                    )&#10;&#10;                    FilledIconButton(&#10;                        onClick = {&#10;                            if (messageText.isNotBlank()) {&#10;                                viewModel.sendMessage(messageText)&#10;                                messageText = &quot;&quot;&#10;                            }&#10;                        },&#10;                        enabled = messageText.isNotBlank() &amp;&amp; !isLoading,&#10;                        modifier = Modifier.size(56.dp),&#10;                        colors = IconButtonDefaults.filledIconButtonColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            Icons.AutoMirrored.Filled.Send,&#10;                            contentDescription = &quot;Send&quot;,&#10;                            modifier = Modifier.size(24.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ChatMessageBubble(message: ChatMessage) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = if (message.isUser) Arrangement.End else Arrangement.Start&#10;    ) {&#10;        if (!message.isUser) {&#10;            Surface(&#10;                shape = MaterialTheme.shapes.medium,&#10;                color = MaterialTheme.colorScheme.secondaryContainer,&#10;                modifier = Modifier.size(40.dp)&#10;            ) {&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier.fillMaxSize()&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.AccountCircle,&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;        }&#10;&#10;        Column(&#10;            modifier = Modifier.widthIn(max = 300.dp),&#10;            horizontalAlignment = if (message.isUser) Alignment.End else Alignment.Start&#10;        ) {&#10;            Surface(&#10;                shape = RoundedCornerShape(&#10;                    topStart = 16.dp,&#10;                    topEnd = 16.dp,&#10;                    bottomStart = if (message.isUser) 16.dp else 4.dp,&#10;                    bottomEnd = if (message.isUser) 4.dp else 16.dp&#10;                ),&#10;                color = if (message.isUser)&#10;                    MaterialTheme.colorScheme.primary&#10;                else&#10;                    MaterialTheme.colorScheme.surfaceVariant,&#10;                shadowElevation = 1.dp&#10;            ) {&#10;                Box(modifier = Modifier.padding(12.dp)) {&#10;                    if (message.isLoading) {&#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(4.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            repeat(3) {&#10;                                Surface(&#10;                                    shape = MaterialTheme.shapes.small,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.3f),&#10;                                    modifier = Modifier.size(8.dp)&#10;                                ) {}&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Text(&#10;                            text = message.content,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = if (message.isUser)&#10;                                MaterialTheme.colorScheme.onPrimary&#10;                            else&#10;                                MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (message.isUser) {&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;            Surface(&#10;                shape = MaterialTheme.shapes.medium,&#10;                color = MaterialTheme.colorScheme.primaryContainer,&#10;                modifier = Modifier.size(40.dp)&#10;            ) {&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier.fillMaxSize()&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Person,&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>